
/*
*	OTHELLO GAME. This is an experimental program still in development.
*	This version only works properly on a visual-200 terminal.
*	The only procedures which rely on the this are:
*		cursor, cleartoeol, clearpage.
*
*	Main control procedures
*/

othello :- pipe(rev_tmp),
	   startup(B1), saveboard(B1), fail.
othello :- getboard(B), rev(B,h), see(user).

startup(B1) :- see('/dev/tty'), addrow1(B), clearpage, nl, ask(B,B1), !.

num_men(4).

addrow1(e.e.e.e.e.e.e.e.o.REST) :- addrow2(REST).
addrow2(e.e.e.e.e.e.e.e.o.REST) :- addrow3(REST).
addrow3(e.e.e.e.e.e.e.e.o.REST) :- addrow4(REST).
addrow4(e.e.e.c.h.e.e.e.o.REST) :- addrow5(REST).
addrow5(e.e.e.h.c.e.e.e.o.REST) :- addrow6(REST).
addrow6(e.e.e.e.e.e.e.e.o.REST) :- addrow7(REST).
addrow7(e.e.e.e.e.e.e.e.o.REST) :- addrow8(REST).
addrow8(e.e.e.e.e.e.e.e.o.nil).

ask(B,B1) :- write('Do you want to go first (y or n) ? '), get(X), nl, nl, go(X,B,B1).

go(121,B,B) :- printbord(B), !, retract(s_insidcor(_)), asserta(s_insidcor(20.21.22.23.29.32.38.41.47.48.49.50.nil)).
go(110,B,B1) :- printbord(B), makemove(48,B,B1), printmove(B1).
go(_,B,B1) :- ask(B,B1).

rev(B,M) :- play(B,M).
rev(B,M) :- notfinish, getboard(A), opponent(M,M1), trimcore, !, rev(A,M1).

play(BRD,h) :- humanmove(BRD,BRD1), printmove(BRD1), saveboard(BRD1), !, fail.
play(BRD,c) :- compmove(BRD,BRD1), retractall(badedge(_,_)), retractall(badinn(_,_)), printmove(BRD1), saveboard(BRD1), !, fail.

notfinish :- num_men(NM), NM<64.
notfinish :- clearline(19,0), writemess(20,0,'GAME FINISHED'), nl,
	     !, fail.

saveboard(B) :- tell(rev_tmp), write(B), write('.'), nl, tell('/dev/tty').

getboard(B) :- see(rev_tmp), read(B), see('/dev/tty').


/*
*	Get humans move from terminal.
*/

humanmove(B,B1) :- writemess(21,0,'Your move '), getch(R,21,10), getch(C,21,11), readln, clearline(23,0), checkmove(B,B1,R,C), clearline(19,0).

getch(X,_,_) :- get0(X), X=\=10.
getch(X,R,C) :- cursor(R,C), getch(X,R,C).

readln :- get0(X), X=:=10.
readln :- readln.

checkmove(_,_,97,98) :- seen, told, abort.
checkmove(BRD,NEWBRD,114,101) :- printbord(BRD), humanmove(BRD,NEWBRD).
checkmove(BRD,BRD,110,111).
checkmove(BRD,NEWBRD,R,C) :- C<57, C>48, R<105, R>96, POS is (R-97)*9+C-49,
			     move(POS,nil,BRD,HD1,BRD1,h,F), F=\=0, join(HD1,BRD1,NEWBRD), rem_move(POS).
checkmove(A,B,_,_) :- writemess(23,0,'ILLEGAL MOVE !!'), humanmove(A,B).


/*
*	Actually changes the board if a move is legal.
*	Procedure move Fails otherwise.
*/

makemove(H,BRD,NEWBRD) :- move(H,nil,BRD,HD1,BRD1,c,_), join(HD1,BRD1,NEWBRD), ROW is H/9, map(ROW,COORD1), COORD2 is (H mod 9)+1,
			  tell('/dev/tty'), writemess(19,0,'I move '), write(COORD1), write(COORD2), nl, nl.

move(0,HD,e.REST,HD1,M.REST1,P,F) :- opponent(P,O), move1(HD,e.REST,HD1,e.REST1,P,O,F), mm(F,P,M), !.
move(0,HD,REST,HD,REST,_,0) :- !.
move(N,HD,H.REST,HD1,REST1,P,F) :- NM1 is N-1, move(NM1,H.HD,REST,HD1,REST1,P,F).

mm(0,_,e).
mm(_,P,P).

move1(HD,e.O.REST,HD1,REST1,P,O,F) :- tryhorz(REST,REST2,P,O,F1), !, move2(HD,e.P.REST2,HD1,REST1,P,O,F2), !, F is F1+F2.
move1(HD,REST,HD1,REST1,P,O,F) :- move2(HD,REST,HD1,REST1,P,O,F).
move2(O.HD,e.REST,HD1,REST1,P,O,F) :- tryhorz(HD,HD2,P,O,F1), !, move3(P.HD2,e.REST,HD1,REST1,P,O,F2), F is F1+F2, !.
move2(HD,REST,HD1,REST1,P,O,F) :- move3(HD,REST,HD1,REST1,P,O,F).
move3(HD,e.X1.X2.X3.X4.X5.X6.X7.X8.O.REST,HD1,REST1,P,O,F) :- tryvert(REST,REST2,P,O,F1), !,
			move4(HD,e.X1.X2.X3.X4.X5.X6.X7.X8.P.REST2,HD1,REST1,P,O,F2), !, F is F1+F2.
move3(HD,REST,HD1,REST1,P,O,F) :- move4(HD,REST,HD1,REST1,P,O,F).
move4(X1.X2.X3.X4.X5.X6.X7.X8.O.HD,e.REST,HD1,REST1,P,O,F) :- tryvert(HD,HD2,P,O,F1), !,
			move5(X1.X2.X3.X4.X5.X6.X7.X8.P.HD2,e.REST,HD1,REST1,P,O,F2), F is F1+F2, !.
move4(HD,REST,HD1,REST1,P,O,F) :- move5(HD,REST,HD1,REST1,P,O,F).
move5(HD,e.X1.X2.X3.X4.X5.X6.X7.O.REST,HD1,REST1,P,O,F) :- tryldiag(REST,REST2,P,O,F1), !,
			move6(HD,e.X1.X2.X3.X4.X5.X6.X7.P.REST2,HD1,REST1,P,O,F2), !, F is F1+F2.
move5(HD,REST,HD1,REST1,P,O,F) :- move6(HD,REST,HD1,REST1,P,O,F).
move6(X1.X2.X3.X4.X5.X6.X7.O.HD,e.REST,HD1,REST1,P,O,F) :- tryldiag(HD,HD2,P,O,F1), !,
			move7(X1.X2.X3.X4.X5.X6.X7.P.HD2,e.REST,HD1,REST1,P,O,F2), F is F1+F2, !.
move6(HD,REST,HD1,REST1,P,O,F) :- move7(HD,REST,HD1,REST1,P,O,F).
move7(HD,e.X1.X2.X3.X4.X5.X6.X7.X8.X9.O.REST,HD1,REST1,P,O,F) :- tryrdiag(REST,REST2,P,O,F1), !,
			move8(HD,e.X1.X2.X3.X4.X5.X6.X7.X8.X9.P.REST2,HD1,REST1,P,O,F2), !, F is F1+F2.
move7(HD,REST,HD1,REST1,P,O,F) :- move8(HD,REST,HD1,REST1,P,O,F).
move8(X1.X2.X3.X4.X5.X6.X7.X8.X9.O.HD,e.REST,X1.X2.X3.X4.X5.X6.X7.X8.X9.P.HD1,e.REST,P,O,F) :- tryrdiag(HD,HD1,P,O,F).
move8(HD,REST,HD,REST,P,O,0).

tryhorz(P.REST,P.REST,P,O,1).
tryhorz(O.REST,P.REST1,P,O,N1) :- tryhorz(REST,REST1,P,O,N), N1 is N+1.

tryvert(X1.X2.X3.X4.X5.X6.X7.X8.P.REST,X1.X2.X3.X4.X5.X6.X7.X8.P.REST,P,O,1).
tryvert(X1.X2.X3.X4.X5.X6.X7.X8.O.REST,X1.X2.X3.X4.X5.X6.X7.X8.P.REST1,P,O,N1) :- tryvert(REST,REST1,P,O,N), N1 is N+1.

tryldiag(X1.X2.X3.X4.X5.X6.X7.P.REST,X1.X2.X3.X4.X5.X6.X7.P.REST,P,O,1).
tryldiag(X1.X2.X3.X4.X5.X6.X7.O.REST,X1.X2.X3.X4.X5.X6.X7.P.REST1,P,O,N1) :- tryldiag(REST,REST1,P,O,N), N1 is N+1.

tryrdiag(X1.X2.X3.X4.X5.X6.X7.X8.X9.P.REST,X1.X2.X3.X4.X5.X6.X7.X8.X9.P.REST,P,O,1).
tryrdiag(X1.X2.X3.X4.X5.X6.X7.X8.X9.O.REST,X1.X2.X3.X4.X5.X6.X7.X8.X9.P.REST1,P,O,N1) :- tryrdiag(REST,REST1,P,O,N), N1 is N+1.

opponent(c,h).
opponent(h,c).

join(nil,END,END) :- !.
join(H.HD,END,BRD) :- join(HD,H.END,BRD), !.

map(0,a). map(1,b). map(2,c). map(3,d). map(4,e). map(5,f). map(6,g). map(7,h).


/*
*	Controls computers move. Tries various types of move
*	in succession. Succeeds when it finds a decent move
*/

compmove(BRD,_) :- corner(BRD,_).
compmove(BRD,NEWBRD) :- s_corner(M.M1), valid(VAL), retractall(valid(_)), bestedge(VAL,BRD,NEWBRD,V), r_corner(V,M.M1).
compmove(BRD,_) :- edge(BRD,_).
compmove(BRD,NEWBRD) :- s_edge(M.M1), valid(VAL), retractall(valid(_)), bestedge(VAL,BRD,NEWBRD,V), r_edge(V,M.M1).
compmove(BRD,_) :- major(BRD,_).
compmove(BRD,NEWBRD) :- s_major(M.M1), valid(VAL), retractall(valid(_)), bestmajor1(VAL,BRD,NEWBRD,V), r_major(V,M.M1).
compmove(BRD,_) :- insidcor(BRD,_).
compmove(BRD,NEWBRD) :- s_insidcor(M.M1), valid(VAL), retractall(valid(_)), bestinner(VAL,BRD,NEWBRD,V), r_insidcor(V,M.M1).
compmove(BRD,_) :- sente(BRD,_).
compmove(BRD,NEWBRD) :- s_sente(M.M1), valid(VAL), retractall(valid(_)), bestinner(VAL,BRD,NEWBRD,V), r_sente(V,M.M1).
compmove(BRD,_) :- gote(BRD,_).
compmove(BRD,NEWBRD) :- s_gote(M.M1), valid(VAL), retractall(valid(_)), bestinner(VAL,BRD,NEWBRD,V), r_gote(V,M.M1).
compmove(BRD,NEWBRD) :- badinn(SQ,_), makemove(SQ,BRD,NEWBRD), rem_move(SQ).
compmove(BRD,NEWBRD) :- badedge(SQ,V), V>500, makemove(SQ,BRD,NEWBRD), rem_move(SQ).
compmove(BRD,_) :- unsafmajor(BRD,_).
compmove(BRD,NEWBRD) :- s_major(M.M1), valid(VAL), retractall(valid(_)), bestmajor2(VAL,BRD,NEWBRD,V), r_major(V,M.M1).
compmove(BRD,NEWBRD) :- badedge(SQ,_), makemove(SQ,BRD,NEWBRD), rem_move(SQ).
compmove(BRD,BRD) :- writemess(19,0,'I CAN''T MOVE !').

s_corner(0.7.63.70.nil).
s_edge(1.2.3.4.5.6.9.16.18.25.27.34.36.43.45.52.54.61.64.65.66.67.68.69.nil).
s_insidcor(20.21.22.23.29.32.38.41.47.49.50.nil).
s_sente(11.14.19.24.46.51.56.59.nil).
s_major(10.15.55.60.nil).
s_gote(12.13.28.33.37.42.57.58.nil).

corner(BRD,_) :- s_corner(M.M1), getmoves(nil,BRD,M.M1,0,cor,VAL), retractall(valid(_)), asserta(valid(VAL)), !, fail.
edge(BRD,_) :- s_edge(M.M1), getmoves(nil,BRD,M.M1,0,edg,VAL), retractall(valid(_)), asserta(valid(VAL)), !, fail.
major(BRD,_) :- s_major(M.M1), safe(M.M1,M2), getmoves(nil,BRD,M2,0,maj,VAL), retractall(valid(_)), asserta(valid(VAL)),!,fail.
sente(BRD,_) :- s_sente(M.M1), getmoves(nil,BRD,M.M1,0,lin,VAL), retractall(valid(_)), asserta(valid(VAL)), !, fail.
insidcor(BRD,_) :- s_insidcor(M.M1), getmoves(nil,BRD,M.M1,0,lin,VAL), retractall(valid(_)), asserta(valid(VAL)), !, fail.
gote(BRD,_) :- s_gote(M.M1), getmoves(nil,BRD,M.M1,0,got,VAL), retractall(valid(_)), asserta(valid(VAL)), !, fail.
unsafmajor(BRD,_) :- s_major(M.M1), getmoves(nil,BRD,M.M1,0,maj,VAL), retractall(valid(_)), asserta(valid(VAL)), !, fail.

safe(M,M1.M2) :- s_corner(C), safe_maj(M,C,M1.M2).
safe_maj(L,nil,L).
safe_maj(L,C.R,L1) :- convcor(C,NC), remove(NC,L,L2), safe_maj(L2,R,L1), !.

convcor(0,10).
convcor(7,15).
convcor(63,55).
convcor(70,60).


/*
*	Given a list of possible moves, getmoves will return
*	values for those moves which are valid.
*/

getmoves(_,_,nil,_,_,nil) :- !.
getmoves(HD,BRD,N.REST,SUM,MM,VAL) :- DELTA is N-SUM, cmove(DELTA,HD,BRD,HD1,BRD1,N,MM,VAL1), !,
				  apnd(VAL1,VAL2,VAL), getmoves(HD1,BRD1,REST,N,MM,VAL2), !.

cmove(0,HD,e.REST,HD,e.REST,N,MM,VAL) :- move1(HD,e.REST,HD1,e.REST1,c,h,F), mm(F,c,M), !,
					 ((MM=edg ; MM=maj),chckmove(HD,e.REST,F,N,MM,VAL) ; chckmove(HD1,M.REST1,F,N,MM,VAL)).
cmove(0,HD,REST,HD,REST,N,MM,nil).
cmove(M,HD,H.REST,HD1,REST1,N,MM,VAL) :- MM1 is M-1, cmove(MM1,H.HD,REST,HD1,REST1,N,MM,VAL).

chckmove(_,_,0,_,_,nil).
chckmove(HD1,BRD1,F,N,MM,triple(N,F,V).nil) :- join(HD1,BRD1,NEWBRD), (MM=edg,eval_edge(N,NEWBRD,V) ; MM=lin,eval_lines(NEWBRD,V) ;
						MM=got,eval_gote(N,NEWBRD,V) ; MM=maj,eval_maj(N,NEWBRD,V) ; MM=cor,eval_corn(N,NEWBRD,V)).

apnd(nil,X,X).
apnd(A.nil,X,A.X).


/*
*	Evaluates value of a move
*/

eval_corn(SQ,BRD,V) :- get_edge(BRD,EDGES), twoedges(SQ,N1,N2,P1,P2), arg(N1,EDGES,E1), score_edge(P1,E1,V1),
		       arg(N2,EDGES,E2), score_edge(P2,E2,V2), V is (V1+V2)/2.
eval_edge(SQ,BRD,V) :- get_edge(BRD,EDGES), findedge(SQ,N,POS), arg(N,EDGES,E), score_edge(POS,E,V1),
		       ((minadjmaj(SQ) ; pradjmaj(SQ,BRD)), (s_corner(C), nextcorn(SQ,NC), element(NC,C) ; V1 < 1000), V is 0 ; V is V1).
eval_lines(BRD,V) :- get_lines(BRD,L), score_lines(L,V).
eval_gote(SQ,BRD,V) :- eval_lines(BRD,V1), adj_gote(SQ,V1,V).
eval_maj(SQ,BRD,V) :- findmaj(SQ,D,P), get_diag(BRD,D1,D2), (D=:=1,score_edge(P,D1,V1) ; score_edge(P,D2,V1)),
		      (V1<500, testcor(SQ,BRD,V2), V is (V1+V2)/2 ; V is V1).

nextcorn(X,0) :- (X=:=5 ; X=:=6 ; X=:=45 ; X=:=54).
nextcorn(X,7) :- (X=:=1 ; X=:=2 ; X=:=52 ; X=:=61).
nextcorn(X,63) :- (X=:=9 ; X=:=18 ; X=:=68 ; X=:=69).
nextcorn(X,70) :- (X=:=16 ; X=:=25 ; X=:=64 ; X=:=65).

get_edge(B0.B1.B2.B3.B4.B5.B6.B7.o.REST,edge(B0.E1,B7.E2,B0.B1.B2.B3.B4.B5.B6.B7,E4)) :- get_edge1(REST,E1,E2,E4).
get_edge1(B9._._._._._._.B16.o.B18._._._._._._.B25.o.B27._._._._._._.B34.o.REST,B9.B18.B27.E1,B16.B25.B34.E2,E4) :-
	get_edge2(REST,E1,E2,E4).
get_edge2(B36._._._._._._.B43.o.B45._._._._._._.B52.o.B54._._._._._._.B61.o.REST,B36.B45.B54.E1,B43.B52.B61.E2,E4) :-
	get_edge3(REST,E1,E2,E4).
get_edge3(B63.B64.B65.B66.B67.B68.B69.B70.o.nil,B63,B70,B63.B64.B65.B66.B67.B68.B69.B70).

findedge(V,3,V) :- V=<6.
findedge(V,4,N) :- 63<V, N is V-63.
findedge(V,1,N) :- 0 is V mod 9, N is V/9.
findedge(V,2,N) :- N is V/9.

twoedges(0,1,3,0,0).			twoedges(7,3,2,7,0).
twoedges(63,1,4,7,0).			twoedges(70,4,2,7,7).

testcor(SQ,BRD,V) :- convcor(N,SQ), get_edge(BRD,EDGES), twoedges(N,N1,N2,P1,P2), arg(N1,EDGES,E1), compl(E1,E1A),
		     score_edge(P1,E1A,V1), arg(N2,EDGES,E2), compl(E2,E2A), score_edge(P1,E2A,V2), V3 is 2000-(V1+V2)/2,
		     (V3>1000, V=2*V3-1000 ; V=V3/2).

compl(X.R,Y.R1) :- (X=c,Y=h ; X=h,Y=c ; Y=X), compl(R,R1).
compl(X,Y) :- (X=c,Y=h ; X=h,Y=c ; Y=X).

score_lines(line(L1,L2,L3,L4),V) :- knowl(L1,V1), knowl(L2,V2), knowl(L3,V3), knowl(L4,V4), V is V1+V2+V3+V4.

get_lines(_._.B2._._.B5._._.o._._.B11._._.B14._._.o.REST,line(B2.B11.L1,B5.B14.L2,L3,L4)) :-
	 get_lines1(REST,L1,L2,L3,L4).
get_lines1(B18.B19.B20.B21.B22.B23.B24.B25.o._._.B29._._.B32._._.o.REST,B20.B29.L1,B23.B32.L2,B18.B19.B20.B21.B22.B23.B24.B25,L4) :-
	  get_lines2(REST,L1,L2,L4).
get_lines2(_._.B38._._.B41._._.o.B45.B46.B47.B48.B49.B50.B51.B52.o.REST,B38.B47.L1,B41.B50.L2,B45.B46.B47.B48.B49.B50.B51.B52) :-
	  get_lines3(REST,L1,L2).
get_lines3(_._.B56._._.B59._._.o._._.B65._._.B68.REST,B56.B65,B59.B68).

adj_gote(SQ,V1,V) :- s_edge(PL), gote_pr(SQ,P), (element(P,PL), V is V1-10 ; V is V1+10).

gote_pr(12,2).        gote_pr(13,5).        gote_pr(28,18).        gote_pr(33,25).
gote_pr(37,45).       gote_pr(42,52).       gote_pr(57,65).        gote_pr(58,68).

element(P,P.R).
element(P,Q.R) :- element(P,R).

findmaj(10,1,1).        findmaj(15,2,1).        findmaj(55,2,6).        findmaj(60,1,6).

get_diag(B0._._._._._._.B7.o._.B10._._._._.B15._.o.REST,B0.B10.D1,B7.B15.D2) :- get_diag1(REST,D1,D2).
get_diag1(_._.B20._._.B23._._.o._._._.B30.B31._._._.o.REST,B20.B30.D1,B23.B31.D2) :- get_diag2(REST,D1,D2).
get_diag2(_._._.B39.B40._._._.o._._.B47._._.B50._._.o.REST,B40.B50.D1,B39.B47.D2) :- get_diag3(REST,D1,D2).
get_diag3(_.B55._._._._.B60._.o.B63._._._._._._.B70.o.nil,B60.B70,B55.B63).

minadjmaj(S) :- (S=:=1;S=:=9), !, s_major(M), s_corner(C), element(0,C), not(element(10,M)).
minadjmaj(S) :- (S=:=6;S=:=16), !, s_major(M), s_corner(C), element(7,C), not(element(15,M)).
minadjmaj(S) :- (S=:=54;S=:=64), !, s_major(M), s_corner(C), element(63,C), not(element(55,M)).
minadjmaj(S) :- (S=:=61;S=:=69), !, s_major(M), s_corner(C), element(70,C), not(element(60,M)).

pradjmaj(S,B) :- (S=:=2,SC is 18 ; S=:=18,SC is 2), !, s_corner(C), element(0,C),
		 s_major(M), not(element(10,M)), getm(B,10,h), getm(B,SC,c).
pradjmaj(S,B) :- (S=:=5,SC is 25 ; S=:=25,SC is 5), !, s_corner(C), element(7,C),
		 s_major(M), not(element(15,M)), getm(B,15,h), getm(B,SC,c).
pradjmaj(S,B) :- (S=:=45,SC is 65 ; S=:=65,SC is 45), !, s_corner(C), element(63,C),
		 s_major(M), not(element(55,M)), getm(B,55,h), getm(B,SC,c).
pradjmaj(S,B) :- (S=:=52,SC is 68 ; S=:=68,SC is 52), !, s_corner(C), element(70,C),
		 s_major(M), not(element(60,M)), getm(B,60,h), getm(B,SC,c).

getm(B,S,P) :- move(0,nil,B,_,H.REST,_,_), !, H=P.


/*
*	Given a list of moves and their corresponding values
*	these routines choose the best move or fail if there
*	is no decent move in the list
*/

bestmajor1(V.VAL,BRD,NEWBRD,SQ) :- bestmove(V.VAL,triple(SQ,_,_)), makemove(SQ,BRD,NEWBRD).
bestedge(V.VAL,BRD,NEWBRD,SQ) :- bestmove(V.VAL,triple(SQ,_,SCORE)), !, testedge(SCORE,SQ), makemove(SQ,BRD,NEWBRD).
bestinner(V.VAL,BRD,NEWBRD,SQ) :- bestmove(V.VAL,triple(SQ,_,SCORE)), !, testinn(SCORE,SQ), makemove(SQ,BRD,NEWBRD).
bestmajor2(V.VAL,BRD,NEWBRD,SQ) :- bestmove(V.VAL,triple(SQ,_,SCORE)), !, testmaj(SCORE), makemove(SQ,BRD,NEWBRD).

testedge(S,_) :- S>=1000.
testedge(S,P) :- badedge(P1,S1), (S>S1, retract(badedge(P1,S1)), asserta(badedge(P,S)) ; true), !, fail.
testedge(S,P) :- asserta(badedge(P,S)), !, fail.

testmaj(SCORE) :- (badedge(P,S), !, SCORE>=S ; true).

testinn(S,_) :- S>=4000.
testinn(S,P) :- badinn(P1,S1), (S>S1, retract(badinn(P1,S1)), asserta(badinn(P,S)) ; true), !, fail.
testinn(S,P) :- asserta(badinn(P,S)), !, fail.

bestmove(P.nil,P).
bestmove(P.REST,P2) :- bestmove(REST,P1), bestm(P,P1,P2).

bestm(triple(SQ,F,V),triple(SQ1,F1,V1),triple(SQ,F,V)) :- (V>V1 ; V=:=V1, F>F1).
bestm(P,P1,P1).


/*
*	Scoring for inner line configurations
*/

knowl(X1.e.Y1.Y2.Y3.Y4.e.X2,S) :- knowl1(Y1.Y2.Y3.Y4,S).
	knowl1(X1.X2.X3.X4,1000) :- (X1=h,X4=c ; X1=c,X4=h), (X2=e,X3=e ; notempty(X2), notempty(X3)).
	knowl1(X1.X2.X3.X4,1020) :- (X1=e,X4=c,(notcomputr(X2) ; X2=c,X3=c) ; X1=c,X4=e,(notcomputr(X3) ; X2=c,X3=c) ;
				    X1=c,X4=c,(X2=c,X3=c ; X2=e,X3=e)).
	knowl1(h.c.h.X,1020) :- X=e ; X=h.
	knowl1(X1.X2.c.h,1020) :- (X1=h,(X2=h ; X2=c) ; X1=e,X2=h).
	knowl1(X1.e.h.X2,1010) :- (notempty(X1),notempty(X2) ; notcomputr(X1),X2=e).
	knowl1(X1.h.e.X2,1010) :- (notempty(X1),notempty(X2) ; notcomputr(X2),X1=e).
	knowl1(h.c.e.c,1000).
	knowl1(c.e.h.c,1000).
	knowl1(X1.X2.X3.X4,990) :- (X2=c,X3=e,(X1=e,X4=h ; knowl1a(X1,X4)) ;
				    X2=e,X3=c,(X1=h,X4=e ; knowl1a(X1,X4))).
		knowl1a(X1,X2) :- (notempty(X1),notempty(X2),(X1=c ; X2=c) ; X1=e,X2=e).
	knowl1(e.c.c.e,990).
	knowl1(e.h.h.e,1010).
	knowl1(X,980).
knowl(e.c.X1.X2.X3.X4.h.e,S) :- knowl2(X1.X2.X3.X4,S).
knowl(e.h.X1.X2.X3.X4.c.e,S) :- knowl2(X4.X3.X2.X1,S).
	knowl2(h.X1.X2.X3,1000) :- notempty(X1),notempty(X2),notempty(X3),(X1=c ; X2=c ; X3=c).
	knowl2(X1.X2.h.c,1000) :- (X1=h,X2=e ; X1=c,notempty(X2)).
	knowl2(c.h.c.X,1000) :- notempty(X).
knowl(e.c.X1.X2.X3.X4.c.e,S) :- knowl3(X1.X2.X3.X4.c.e,S1), S is 2*S1-1000.
knowl(e.c.X,S) :- knowl3(X,S).
knowl(X1.X2.X3.X4.X5.X6.c.e,S) :- knowl3(X6.X5.X4.X3.X2.X1,S).
	knowl3(X,960) :- clineh(X).
	knowl3(_,980).
knowl(e.h.X1.X2.X3.X4.h.e,S) :- knowl4(X1.X2.X3.X4.h.e,S1), S=2*S1-1000.
knowl(e.h.X,S) :- knowl4(X,S).
knowl(X1.X2.X3.X4.X5.X6.h.e,S) :- knowl4(X6.X5.X4.X3.X2.X1,S).
	knowl4(c.X,1040) :- clineh(X).
	knowl4(h.c.X,1040) :- clineh(X).
	knowl4(h.h.c.X,1040) :- clineh(X).
	knowl4(h.h.h.c.X,1040) :- X=[h|X1] ; X=[c,h|X1].
	knowl4(h.h.h.h.X1.X2,1040) :- (X1=c,notempty(X2) ; X1=h,X2=c).
	knowl4(c.e.c.X,1030) :- (X=[e|X1] ; X=[c,e|X1] ; X=[c,c|X1],nothuman(X1)).
	knowl4(c.c.e.c.X,1030) :- (X=[e|X1] ; X=[c|c] ; X=[c|e]).
	knowl4(c.c.c.X,1030) :- (X=[e,c|X1],nothuman(X1) ; X=[c,e|c]).
	knowl4(_,1020).
knowl(X,1000).

clineh(X) :- X=[h|X1] ; X=[c,h|X1] ; X=[c,c,h|X1] ; X=[c,c,c,h|X1] ; X=[c,c,c,c,h|X1] ; X=[c,c,c,c,c|X1],notempty(X1) ;
	     X=[e,c|X1] ; X=[c,e,c|X1] ; X=[c,c,e,c|X1] ; X=[c,c,c,e|c].


/*
*	Calls edge configuration scoring routines.
*/

score_edge(0,E0.E,S) :- c_knowl(E,S).
score_edge(1,E0.E1.E,S) :- m_knowl(E0.E,S).
score_edge(2,E0.E1.E2.E,S) :- p_knowl(E0.E1.E,S).
score_edge(3,E0.E1.E2.E3.E,S) :- s_knowl(E0.E1.E2.E,S).
score_edge(4,E0.E1.E2.E3.E4.E5.E6.E7,S) :- s_knowl(E7.E6.E5.E3.E2.E1.E0,S).
score_edge(5,E0.E1.E2.E3.E4.E5.E6.E7,S) :- p_knowl(E7.E6.E4.E3.E2.E1.E0,S).
score_edge(6,E0.E1.E2.E3.E4.E5.E6.E7,S) :- m_knowl(E7.E5.E4.E3.E2.E1.E0,S).
score_edge(7,E0.E1.E2.E3.E4.E5.E6.E7,S) :- c_knowl(E6.E5.E4.E3.E2.E1.E0,S).


/*
*	Values for moves to a corner.
*/

c_knowl(X1.X,S) :- notcomputr(X1), c_knowl1(X,S1), (X1=h, S is 2000-S1 ; S is S1).
c_knowl(c.c.c.c.X.e.e,1010) :- nothuman(X).
c_knowl(c.c.c.c.c.c.e,1900).
c_knowl(h.h.h.X.e.e.e,1010) :- notcomputr(X).
c_knowl(h.h.h.h.h.e.e,1010).
c_knowl(h.h.h.h.h.h.e,1900).
c_knowl(X,1000).
	c_knowl1(X1.c.c.X2.e.e,990) :- notempty(X1), nothuman(X2).
	c_knowl1(h.h.X1.X2.e.e,990) :- (X1=c, (X2=e ; X2=c) ; X1=h, X2=c).
	c_knowl1(c.c.c.c.c.e,100).
	c_knowl1(h.X1.X2.X3.c.e,100) :- (X1=h, (X2=c, X3=c ; X2=h, notempty(X3)) ; X1=c, X2=c, X3=c).

/*
*	Scoring for moves to a 'minor' point.
*/

m_knowl(c.X0.X1.X2.X3.X4.X5,1250) :- notempty(X5).
m_knowl(c.X,1500).
m_knowl(X1.e.X,500).
m_knowl(h.h.X,S) :- m_knowl3(X,S).
m_knowl(e.c.h.c.X,0).
m_knowl(e.c.X,0) :- clineh(X).
m_knowl(e.c.c.c.c.c.e,1500).
m_knowl(e.c.c.c.c.e.e,400).
m_knowl(e.h.X1.X2.c.e.e,350) :- notempty(X1), notempty(X2).
m_knowl(e.X1.X,SCORE) :- m_knowl1(X,SCORE).
	m_knowl1(e.X,0).
	m_knowl1(X1.c.X,SCORE) :- m_knowl1a(X,SCORE).
	m_knowl1(c.e.X,SCORE) :- m_knowl1b(X,SCORE).
	m_knowl1(c.h.X,0).
	m_knowl1(h.e.X,0).
	m_knowl1(h.h.X,SCORE) :- m_knowl1c(X,SCORE).
		m_knowl1a(c.X,SCORE) :- m_knowl1d(X,SCORE).
		m_knowl1a(e.e.e,500).
		m_knowl1a(e.h.e,500).
		m_knowl1a(h.e.e,0).
		m_knowl1a(X,500).

		m_knowl1b(c.X1.X,100) :- (nothuman(X1) ; X1=h, notempty(X)).
		m_knowl1b(X,500).

		m_knowl1c(e.X,0).
		m_knowl1c(h.e.X,0).
		m_knowl1c(c.X,SCORE) :- m_knowl1d(X,SCORE).
		m_knowl1c(h.c.X,SCORE) :- m_knowl1e(X,SCORE).
		m_knowl1c(h.h.c,1500).
		m_knowl1c(h.h.X,0).
			m_knowl1d(c.X,SCORE) :- m_knowl1e(X,SCORE).
			m_knowl1d(e.e,1500).
			m_knowl1d(X,500).
				m_knowl1e(h,0).
				m_knowl1e(X,1500).
m_knowl(h.c.X,SCORE) :- m_knowl2(X,SCORE).
	m_knowl2(e.X,500).
	m_knowl2(h.X,1500).
	m_knowl2(c.h.X,1500).
	m_knowl2(c.c.h.X,1500).
	m_knowl2(c.c.c.h.X,1500).
	m_knowl2(c.c.c.c.e,0).
	m_knowl2(c.c.c.c.h,1500).
	m_knowl2(c.c.c.c.c,1500).
	m_knowl2(X,500).

	m_knowl3(c.X,400) :- cline(X).
	m_knowl3(h.c.X,400) :- cline(X).
	m_knowl3(h.h.c.X,400) :- cline(X).
	m_knowl3(h.h.h.c.X,400) :- cline(X).
	m_knowl3(X,1500).

cline(X) :- (X=[e|X1] ; X=[c,e|X1] ; X=[c,c,e|X1] ; X=[c,c,c|e]).


/*
*	Scoring for 'prime' points.
*/

p_knowl(h.e.X1.X2.X3.X4.X5,SCORE) :- m_knowl(e.X1.X2.X3.X4.X5.e,S), (notempty(X5), S>1250, SCORE is 1100 ; SCORE is S).
p_knowl(e.c.X1.X2.X3.X4.X5,SCORE) :- m_knowl(e.X1.X2.X3.X4.X5.e,SCORE).
p_knowl(h.X0.X1.X2.X3.X4.X5,SCORE) :- m_knowl(h.X1.X2.X3.X4.X5.h,S), (notempty(X5), S>1250, SCORE is 1100 ; SCORE is S).
p_knowl(c.X0.X1.X2.X3.X4.X5,1250) :- notempty(X5).
p_knowl(c.X,1500).
p_knowl(e.e.e.X,SCORE) :- p_knowl1(X,SCORE).
	p_knowl1(c.h.h.h,0).
	p_knowl1(c.e.X,0).
	p_knowl1(c.c.e.X,0).
	p_knowl1(c.c.c.e,0).
	p_knowl1(c.c.X1.h,0).
	p_knowl1(c.c.c.c,995).
	p_knowl1(X1.X2.X3.h,995).
	p_knowl1(X,1500).
p_knowl(e.e.h.X,SCORE) :- p_knowl2(X,SCORE).
	p_knowl2(e.c.e.e,1400).
	p_knowl2(e.X,950).
	p_knowl2(h.X,SCORE) :- p_knowl2a(X,SCORE).
	p_knowl2(c.X,SCORE) :- p_knowl2b(X,SCORE).
		p_knowl2a(e.X,950).
		p_knowl2a(X1.h.c,1500).
		p_knowl2a(X1.c.X,1500) :- nothuman(X).
		p_knowl2a(c.e.e,1500).
		p_knowl2a(h.h.e,200).
		p_knowl2a(h.e.e,1250).
		p_knowl2a(X,950).

		p_knowl2b(e.c.e,950).
		p_knowl2b(h.h.e,500).
		p_knowl2b(h.c.e,950).
		p_knowl2b(X1.X2.e,1500).
		p_knowl2b(e.e.h,995).
		p_knowl2b(e.h.h,1500).
		p_knowl2b(h.e.h,1500).
		p_knowl2b(h.c.h,995).
		p_knowl2b(c.e.h,1500).
		p_knowl2b(X1.X2.h,500).
p_knowl(e.h.X,SCORE) :- p_knowl3(X,SCORE).
	p_knowl3(X1.X2.X3.X4.X5,1500) :- notempty(X1), notempty(X2), notempty(X3), notempty(X4), notempty(X5).
	p_knowl3(e.X,SCORE) :- p_knowl3b(X,SCORE).
	p_knowl3(X,SCORE) :- p_knowl3a(X,SCORE).
		p_knowl3a(e.X,1500).
		p_knowl3a(h.e.X,1500).
		p_knowl3a(h.h.X1.X,1500) :- notcomputr(X1).
		p_knowl3a(h.c.e.c,1500).
		p_knowl3a(c.e.X1.c,1500) :- notempty(X1).
		p_knowl3a(c.e.c.e,1500).
		p_knowl3a(c.h.X1.X,1500) :- notcomputr(X1).
		p_knowl3a(c.c.h.X,1500).
		p_knowl3a(X,500).

		p_knowl3b(c.e.X,1500).
		p_knowl3b(c.c.e.X,1500).
		p_knowl3b(c.c.c.X1,1500) :- nothuman(X1).
		p_knowl3b(e.h.X,1500).
		p_knowl3b(X,500).
p_knowl(e.e.c.X,SCORE) :- p_knowl4(X,SCORE).
	p_knowl4(e.X,SCORE) :- p_knowl4a(X,SCORE).
	p_knowl4(h.X,SCORE) :- p_knowl4b(X,SCORE).
	p_knowl4(c.X,SCORE) :- p_knowl4c(X,SCORE).
		p_knowl4a(c.X1.h,500) :- notempty(X1).
		p_knowl4a(e.e.e,1500).
		p_knowl4a(h.X1.e,1500) :- notcomputr(X1).

		p_knowl4b(X1.e.e,500) :- notcomputr(X1).
		p_knowl4b(e.c.h,500).
		p_knowl4b(X1.c.e,500) :- notempty(X1).
		p_knowl4b(h.h.X1,500) :- notcomputr(X1).
		p_knowl4b(e.h.X1,1500) :- notcomputr(X1).
		p_knowl4b(h.X1.h,1500) :- nothuman(X1).
		p_knowl4b(c.h.X1,1500) :- notempty(X1).
		p_knowl4b(X,995).

		p_knowl4c(X1.h.e,500) :- notempty(X1).
		p_knowl4c(c.X1.h,500) :- notempty(X1).
		p_knowl4c(h.X1.e,500) :- nothuman(X1).
		p_knowl4c(e.c.h,500).
		p_knowl4c(h.c.e,500).
		p_knowl4c(e.X1.e,1500) :- notcomputr(X1).
		p_knowl4c(h.c.h,1500).
		p_knowl4c(c.X1.e,1500).
		p_knowl4c(c.c.c,1500).
		p_knowl4c(X,995).
notempty(h).
notempty(c).
nothuman(e).
nothuman(c).
notcomputr(e).
notcomputr(h).


/*
*	Values for moves to a 'side' point.
*/

s_knowl(h.X,S) :- s_knowl1(X,S).
	s_knowl1(X1.X2.h.X,1500) :- hh_hc_cc(X1.X2), not(bad1(X)).
		bad1(c.e.X).
		bad1(h.c.e).
		bad1(c.c.e).
	s_knowl1(X1.X2.c.h.X,1500) :- hh_hc_cc(X1.X2), X \= [c|e].
	s_knowl1(X1.X2.c.c.c.X,1500) :- hh_hc_cc(X1.X2).
	s_knowl1(X,100).
s_knowl(c.c.X1.X,1500) :- notempty(X1).
s_knowl(c.h.h.X,1500).
s_knowl(X1.X2.X3.X4.c.c.c,S) :- notempty(X4), (notempty(X1),S is 1100 ; S is 1500).
s_knowl(X1.X2.X3.h.h.X4.c,S) :- notempty(X4), (notempty(X1),S is 1100  ; S is 1500).
s_knowl(e.e.e.h.c.e.e,995).
s_knowl(e.e.e.X1.c.X.e,1500) :- notempty(X1).
s_knowl(e.e.h.c.c.e.e,1250).
s_knowl(e.e.c.c.h.e.e,1250).
s_knowl(e.e.c.h.h.e.e,1250).
s_knowl(e.e.h.h.h.e.e,1250).
s_knowl(e.e.h.e.c.e.e,995).
s_knowl(e.e.h.h.c.e.e,1500).
s_knowl(e.e.e.c.e.e.e,500).
s_knowl(e.e.c.e.h.e.e,1250).
s_knowl(e.e.e.e.h.e.e,995).
s_knowl(e.e.e.e.e.e.e,995).
s_knowl(e.e.c.h.c.e.e,1500).
s_knowl(e.e.h.X,1500) :- good_s(X).
s_knowl(X1.h.h.X,1500) :- good_s(X).
	good_s(h.e.e.e).
	good_s(h.h.e.e).
	good_s(h.h.h.X).
s_knowl(X,995).

hh_hc_cc(h.h).
hh_hc_cc(h.c).
hh_hc_cc(c.c).

/*
*	Used to remove a square from a list of unoccupied squares.
*/

remove(V,V.REST,REST).
remove(V,U.REST,U.REST1) :- remove(V,REST,REST1).

r_corner(P,L) :- remove(P,L,L1), asserta(s_corner(L1)), retract(s_corner(L)).
r_edge(P,L) :- remove(P,L,L1), asserta(s_edge(L1)), retract(s_edge(L)).
r_insidcor(P,L) :- remove(P,L,L1), asserta(s_insidcor(L1)), retract(s_insidcor(L)).
r_sente(P,L) :- remove(P,L,L1), asserta(s_sente(L1)), retract(s_sente(L)).
r_major(P,L) :- remove(P,L,L1), asserta(s_major(L1)), retract(s_major(L)).
r_gote(P,L) :- remove(P,L,L1), asserta(s_gote(L1)), retract(s_gote(L)).

rem_move(P) :- s_corner(L), r_corner(P,L).
rem_move(P) :- s_edge(L), r_edge(P,L).
rem_move(P) :- s_insidcor(L), r_insidcor(P,L).
rem_move(P) :- s_sente(L), r_sente(P,L).
rem_move(P) :- s_major(L), r_major(P,L).
rem_move(P) :- s_gote(L), r_gote(P,L).


/*
*	Printing a move is done by printmove
*	Redraw of screen is done by printbord.
*/

printbord(B) :- printb(B).
printbord(B).

printb(BOARD) :- clearpage,write('    1   2   3   4   5   6   7   8'),nl,nl, printrow,
		writemess(0,38,'MOTH :   Melbourne university OTHello 4.8'), writemess(1,38,'-----------------------------------------'),
		writemess(3,53,'Human Score'),
		writemess(8,52,'Computer Score'), writemess(12,44,'+---------------------------------+'), 
		writemess(13,44,'| Possible responses :            |'), writemess(14,44,'|                                 |'),
		writemess(15,44,'| no : If you have no legal moves |'),
		writemess(16,44,'| ab : Abort game                 |'), writemess(17,44,'| re : Redraw screen              |'),
		writemess(18,44,'+---------------------------------+'), printmove(BOARD), !, fail.

printrow :- write(a), nl, nl, write(b), nl, nl, write(c), nl, nl, write(d), nl, nl,
	    write(e), nl, nl, write(f), nl, nl, write(g), nl, nl, write(h), nl, nl.

printmove(BOARD) :- printr(BOARD,1,H,C), writemess(5,58,H), writemess(10,58,C),
		    cursor(17,0), nl, retract(num_men(_)), NM is H+C, asserta(num_men(NM)),
		    (NM =:= 64, asserta(score(H,C)) ; true).

printr(HEAD.REST,N,H,C) :- ARG1 is N+N, cursor(ARG1,1), printman(HEAD.REST,N,H,C).
printr(H,N,0,0).

printman(e.REST,X,H,C) :- write('   .'),printman(REST,X,H,C), !.
printman(h.REST,X,H1,C) :- write('   '),write('X'),printman(REST,X,H,C),H1 is H+1, !.
printman(c.REST,X,H,C1) :- write('   '),write('O'),printman(REST,X,H,C),C1 is C+1, !.
printman(o.REST,X,H,C) :- nl,nl,XP1 is X+1,printr(REST,XP1,H,C).

writemess(V,H,MESS) :- cursor(V,H), cleartoeol, write(MESS).
clearline(V,H) :- cursor(V,H), cleartoeol.
/* The following 3 procedures only work on a visual terminal */
clearpage :- put(027), put(118), cursor(0,0).
cleartoeol :- put(027), put(120).
cursor(R,C) :- R1 is R+32, C1 is C+32, put(027), put(089), put(R1), put(C1).


/* The following defs were added to avoid warning messages when running
on MU-PROLOG  jwl april 83 */
badedge(X,Y).
badinn(X,Y).
?- retract(badedge(X,Y)).
?- retract(badinn(X,Y)).
