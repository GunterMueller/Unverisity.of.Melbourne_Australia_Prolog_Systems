%	$Header: compare.pl,v 1.1 85/09/23 19:01:28 lee Exp $
%
%	term comparison
%	(compare/2, @</2, $</2 etc not here yet)
%	logical version is term_compare/3 which delays with vars
%	(and causes a bit of backtracking too, currently).
%	term order is ints, low arity, low alphanumeric name, args L to R
%	This should really be implemented in C.
%	Actually, compare/3 should be in C (and will be), then
%	term_compare can be written as follows:
%
%	term_compare(C, T1, T2) :- if T1=T2 then C=(=)
%					else compare(C, T1, T2).
%
%	(if = has to be implemented properly - perhaps in terms
%	 of $is_eq/4)

?- use_if muprolog.
	?- hide([ compare1(3), ncompare(5), lcompare(3),
		scompare(3), non_int(1)]).
?- use_end.

term_compare(C, X, Y) :-
	$is_eq([], X, Y, R),
	(if R = true then
		C = (=)
	else
		compare1(X, Y, C)
	).

?- use_if muprolog.
	?- wait compare1(0, 0, 1).
	compare1(xxx, _, _) :-		% causes delay with vars
		fail.
	compare1(_, xxx, _) :-
		fail.
?- use_else.
	?- compare1(A, B, C) when A and B.
?- use_end.
compare1(X, Y, (<)) :-
	int(X),
	int(Y),
	X < Y.
compare1(X, Y, (>)) :-
	int(X),
	int(Y),
	X > Y.
compare1(X, Y, (<)) :-
	int(X),
	non_int(Y).
compare1(X, Y, (>)) :-
	int(Y),
	non_int(X).
compare1(X, Y, C) :-
	X =.. XF.XA,
	Y =.. YF.YA,
	length(XA, XN),
	length(YA, YN),
	(	XN < YN,
		C = (<)
	;	 
		XN > YN,
		C = (>)
	;
		XN = YN,
		ncompare(XF, XA, YF, YA, C)
	).

ncompare(XF, XA, XF, YA, C) :-
	lcompare(XA, YA, C).
ncompare(XF, XA, YF, YA, C) :-
	XF ~= YF,
	name(XF, XN),
	name(YF, YN),
	scompare(XN, YN, C).

?- use_if muprolog.
	?- wait lcompare(1, 0, 1).	% 0,0,1 is ok too
	?- wait lcompare(0, 1, 1).
?- use_else.
	?- lcompare(A, B, C) when A and B.
?- use_end.
lcompare(A.XA, B.YA, C) :-
	term_compare(C1, A, B),
	lcompare1(XA, YA, C, C1).

?- use_if muprolog.
	?- wait lcompare1(0,0,0,1).
	lcompare1(_,_,xxx,_) :- fail.
?- use_else.
	?- lcompare1(A,B,C,C1) when C.
?- use_end.
lcompare1(XA, YA, C, C1) :-
	(	C1 = (<),
		C = (<)
	;	 
		C1 = (>),
		C = (>)
	;
		C1 = (=),
		lcompare(XA, YA, C)
	).

?- use_if muprolog.
	?- wait scompare(0, 0, 1).
?- use_else.
	?- scompare(A, B, C) when A and B.
?- use_end.
scompare([], [], (=)).
scompare([], _._, (<)).
scompare(_._, [], (>)).
scompare(A.X, A.Y, C) :-
	scompare(X, Y, C).
scompare(A.X, B.Y, (<)) :-
	A < B.
scompare(A.X, B.Y, (>)) :-
	A > B.

non_int(X) :-
	X =.. _.

?- use_if muprolog.
	?- protect(term_compare(3)).
?- use_end.
